--[ 2022.10.25.10.58.10.674.0 ]--
NewLogger: P04_Pathfinding
Version: 1.5
--[ 2022.10.25.10.58.10.677.0 ]--
InitTree:
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/pack/pack-b4e0115436e87889784e14152f6d0d80dd73fe34.idx
/.git/objects/pack/pack-b4e0115436e87889784e14152f6d0d80dd73fe34.pack
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/png2emap.py
/tests/ramp.png.emap
/tests/ramp2.png.emap
/tests/ramp3.png.emap
/tests/mazeAB.png.emap
/tests/usa128.png.emap
/tests/usa256.png.emap
/tests/usa1024.png.emap
/tests/maze32_0.png.emap
/tests/maze32_1.png.emap
/tests/maze232_0.png.emap
/tests/maze320_0.png.emap
/tests/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2022.10.25.10.58.10.678.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2022.10.25.10.58.10.678.1 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[2];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.resetPath();
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2022.10.25.10.58.10.678.2 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2022.10.25.10.58.10.678.3 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) { }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return 0;
        }

        // returns if this PFNode is still valid
        public boolean isValid() {
            return false;
        }

        // invalidates the PFNode
        public void invalidate() {
        }

        // returns if the PFNode has been used
        public boolean isUsed() {
            return true;
        }

        // uses the PFNode
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
    }

    public void setPathStart(Coord loc) {
    }

    public Coord getPathStart() {
        return null;
    }

    public void setPathEnd(Coord loc) {
    }

    public Coord getPathEnd() {
        return null;
    }

    public void setHeuristic(float v) {
    }

    public float getHeuristic() {
        return 0;
    }

    public void resetPath() {
    }

    public void computePath() {
    }

    public boolean foundPath() {
        return false;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {
        return null;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2022.10.25.10.58.10.678.4 ]--
InitFile: /.cos265


--[ 2022.10.25.10.58.10.678.5 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2022.10.25.10.58.10.678.6 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.10.25.10.58.10.678.7 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2022.10.25.10.58.10.678.8 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2022.10.25.10.58.11.757.0 ]--
UpdateTree (AD): 1 0
+ /.log/history.log

--[ 2022.10.25.11.00.30.352.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 2 /
--[ 2022.10.25.11.00.30.373.0 ]--
r 2 //
--[ 2022.10.25.11.00.36.681.0 ]--
r 2 //h
--[ 2022.10.25.11.00.36.733.0 ]--
r 2 //hi
--[ 2022.10.25.11.00.37.916.0 ]--
r 2 //h
--[ 2022.10.25.11.00.37.941.0 ]--
r 2 //
--[ 2022.10.25.11.00.38.099.0 ]--
r 2 /
--[ 2022.10.25.11.00.38.788.0 ]--
r 2 //
--[ 2022.10.25.11.00.39.131.0 ]--
r 2 //k
--[ 2022.10.25.11.00.39.224.0 ]--
r 2 //ka
--[ 2022.10.25.11.00.39.344.0 ]--
r 2 //kat
--[ 2022.10.25.11.00.39.469.0 ]--
r 2 //kate
--[ 2022.10.25.11.00.39.650.0 ]--
r 2 //kate 
--[ 2022.10.25.11.00.39.776.0 ]--
r 2 //kate w
--[ 2022.10.25.11.00.39.950.0 ]--
r 2 //kate wa
--[ 2022.10.25.11.00.40.027.0 ]--
r 2 //kate was
--[ 2022.10.25.11.00.40.150.0 ]--
r 2 //kate was 
--[ 2022.10.25.11.00.40.330.0 ]--
r 2 //kate was h
--[ 2022.10.25.11.00.40.394.0 ]--
r 2 //kate was he
--[ 2022.10.25.11.00.40.468.0 ]--
r 2 //kate was her
--[ 2022.10.25.11.00.40.593.0 ]--
r 2 //kate was here
--[ 2022.10.25.11.17.56.519.0 ]--
UpdateTree (AD): 24 0
+ /out/production/P04_Pathfinding/.donotlog
+ /out/production/P04_Pathfinding/algs4.jar
+ /out/production/P04_Pathfinding/stdlib.jar
+ /out/production/P04_Pathfinding/Coord.class
+ /out/production/P04_Pathfinding/png2emap.py
+ /out/production/P04_Pathfinding/Walker.class
+ /out/production/P04_Pathfinding/ramp.png.emap
+ /out/production/P04_Pathfinding/Terrain.class
+ /out/production/P04_Pathfinding/ramp2.png.emap
+ /out/production/P04_Pathfinding/ramp3.png.emap
+ /out/production/P04_Pathfinding/mazeAB.png.emap
+ /out/production/P04_Pathfinding/usa128.png.emap
+ /out/production/P04_Pathfinding/usa256.png.emap
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/usa1024.png.emap
+ /out/production/P04_Pathfinding/maze32_0.png.emap
+ /out/production/P04_Pathfinding/maze32_1.png.emap
+ /out/production/P04_Pathfinding/maze232_0.png.emap
+ /out/production/P04_Pathfinding/maze320_0.png.emap
+ /out/production/P04_Pathfinding/mazeBrain.png.emap
+ /out/production/P04_Pathfinding/TerrainEditor.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class
+ /out/production/P04_Pathfinding/PathfinderVisualizer.class
+ /out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class

--[ 2022.10.25.11.17.56.520.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.10.25.11.24.54.676.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.10.25.11.29.27.965.0 ]--
:/src/Pathfinder.java
+ 17         public PFNode(Coord loc, PFNode fromNode) { 
r 18         }
--[ 2022.10.25.11.29.28.011.0 ]--
+ 18             
--[ 2022.10.25.11.29.30.973.0 ]--
+ 17         
--[ 2022.10.25.11.29.32.878.0 ]--
- 17
--[ 2022.10.25.11.29.34.768.0 ]--
- 17
r 17         public PFNode(Coord loc, PFNode fromNode) {
--[ 2022.10.25.11.29.59.888.0 ]--
+ 17         
--[ 2022.10.25.11.30.02.364.0 ]--
r 17         C
--[ 2022.10.25.11.30.02.644.0 ]--
r 17         Co
--[ 2022.10.25.11.30.02.691.0 ]--
r 17         Coo
--[ 2022.10.25.11.30.02.786.0 ]--
r 17         Coor
--[ 2022.10.25.11.30.02.988.0 ]--
r 17         Coord
--[ 2022.10.25.11.30.03.364.0 ]--
r 17         Coord 
--[ 2022.10.25.11.30.03.488.0 ]--
r 17         Coord l
--[ 2022.10.25.11.30.03.681.0 ]--
r 17         Coord lo
--[ 2022.10.25.11.30.04.149.0 ]--
r 17         Coord loc
--[ 2022.10.25.11.30.04.807.0 ]--
r 17         Coord loc;
--[ 2022.10.25.11.30.08.539.0 ]--
+ 19             
--[ 2022.10.25.11.30.09.349.0 ]--
r 19             l
--[ 2022.10.25.11.30.09.509.0 ]--
r 19             lo
--[ 2022.10.25.11.30.09.631.0 ]--
r 19             loc
--[ 2022.10.25.11.30.09.895.0 ]--
r 19             loc 
--[ 2022.10.25.11.30.10.260.0 ]--
r 19             loc =
--[ 2022.10.25.11.30.10.350.0 ]--
r 19             loc = 
--[ 2022.10.25.11.30.10.556.0 ]--
r 19             loc = l
--[ 2022.10.25.11.30.10.733.0 ]--
r 19             loc = lo
--[ 2022.10.25.11.30.10.798.0 ]--
r 19             loc = loc
--[ 2022.10.25.11.30.11.404.0 ]--
r 19             loc = loc;
--[ 2022.10.25.11.30.32.407.0 ]--
- 19
--[ 2022.10.25.11.30.34.097.0 ]--
- 17
--[ 2022.10.25.11.32.14.657.0 ]--
+ 22             
--[ 2022.10.25.11.32.19.516.0 ]--
r 22             r
--[ 2022.10.25.11.32.19.662.0 ]--
r 22             re
--[ 2022.10.25.11.32.20.329.0 ]--
r 22             ret
--[ 2022.10.25.11.32.20.720.0 ]--
r 22             retu
--[ 2022.10.25.11.32.21.013.0 ]--
r 22             retun
--[ 2022.10.25.11.32.21.058.0 ]--
r 22             retunr
--[ 2022.10.25.11.32.21.406.0 ]--
r 22             retunr 
--[ 2022.10.25.11.32.21.779.0 ]--
r 22             retunr
--[ 2022.10.25.11.32.21.954.0 ]--
r 22             retun
--[ 2022.10.25.11.32.22.160.0 ]--
r 22             retu
--[ 2022.10.25.11.32.22.681.0 ]--
r 22             retur
--[ 2022.10.25.11.32.22.835.0 ]--
r 22             return
--[ 2022.10.25.11.32.23.026.0 ]--
r 22             return 
--[ 2022.10.25.11.32.24.936.0 ]--
r 22             return t
--[ 2022.10.25.11.32.25.075.0 ]--
r 22             return th
--[ 2022.10.25.11.32.25.231.0 ]--
r 22             return thi
--[ 2022.10.25.11.32.25.466.0 ]--
r 22             return this
--[ 2022.10.25.11.32.25.707.0 ]--
r 22             return this.
--[ 2022.10.25.11.32.26.034.0 ]--
r 22             return this.c
--[ 2022.10.25.11.32.26.114.0 ]--
r 22             return this.co
--[ 2022.10.25.11.32.26.302.0 ]--
r 22             return this.com
--[ 2022.10.25.11.32.26.498.0 ]--
r 22             return this.compareTo
--[ 2022.10.25.11.32.26.508.0 ]--
r 22             return this.compareTo()
--[ 2022.10.25.11.32.27.120.0 ]--
r 22             return this.compareTo(t)
--[ 2022.10.25.11.32.27.403.0 ]--
r 22             return this.compareTo(th)
--[ 2022.10.25.11.32.27.515.0 ]--
r 22             return this.compareTo(tha)
--[ 2022.10.25.11.32.27.597.0 ]--
r 22             return this.compareTo(that)
--[ 2022.10.25.11.32.28.716.0 ]--
r 22             return this.compareTo(that);
--[ 2022.10.25.11.32.30.554.0 ]--
r 23             
--[ 2022.10.25.11.32.41.821.0 ]--
- 23
--[ 2022.10.25.11.32.43.491.0 ]--
r 22             return this.compareTo(that);    
--[ 2022.10.25.11.32.43.628.0 ]--
r 22             return this.compareTo(that);        
--[ 2022.10.25.11.32.43.820.0 ]--
r 22             return this.compareTo(that);        /
--[ 2022.10.25.11.32.43.984.0 ]--
r 22             return this.compareTo(that);        //
--[ 2022.10.25.11.32.44.509.0 ]--
r 22             return this.compareTo(that);        //?
--[ 2022.10.25.11.32.44.681.0 ]--
r 22             return this.compareTo(that);        //??
--[ 2022.10.25.11.32.44.830.0 ]--
r 22             return this.compareTo(that);        //???
--[ 2022.10.25.11.38.03.379.0 ]--
+ 60         
--[ 2022.10.25.11.38.24.944.0 ]--
r 58     
--[ 2022.10.25.11.38.28.243.0 ]--
r 58     C
--[ 2022.10.25.11.38.28.624.0 ]--
r 58     Co
--[ 2022.10.25.11.38.28.788.0 ]--
r 58     Coo
--[ 2022.10.25.11.38.28.891.0 ]--
r 58     Coor
--[ 2022.10.25.11.38.29.194.0 ]--
r 58     Coord
--[ 2022.10.25.11.38.29.504.0 ]--
r 58     Coord 
--[ 2022.10.25.11.38.30.101.0 ]--
r 58     Coord p
--[ 2022.10.25.11.38.30.190.0 ]--
r 58     Coord pa
--[ 2022.10.25.11.38.30.320.0 ]--
r 58     Coord pat
--[ 2022.10.25.11.38.30.392.0 ]--
r 58     Coord path
--[ 2022.10.25.11.38.30.725.0 ]--
r 58     Coord paths
--[ 2022.10.25.11.38.31.398.0 ]--
r 58     Coord path
--[ 2022.10.25.11.38.31.786.0 ]--
r 58     Coord pathS
--[ 2022.10.25.11.38.32.000.0 ]--
r 58     Coord pathSt
--[ 2022.10.25.11.38.32.178.0 ]--
r 58     Coord pathSta
--[ 2022.10.25.11.38.32.247.0 ]--
r 58     Coord pathStar
--[ 2022.10.25.11.38.32.408.0 ]--
r 58     Coord pathStart
--[ 2022.10.25.11.38.35.026.0 ]--
r 58     Coord pathStart;
--[ 2022.10.25.11.38.35.860.0 ]--
r 58     Coord pathStart;    
--[ 2022.10.25.11.38.37.529.0 ]--
r 60         p
--[ 2022.10.25.11.38.37.649.0 ]--
r 60         pa
--[ 2022.10.25.11.38.37.790.0 ]--
r 60         pat
--[ 2022.10.25.11.38.37.929.0 ]--
r 60         path
--[ 2022.10.25.11.38.38.364.0 ]--
r 60         pathS
--[ 2022.10.25.11.38.38.535.0 ]--
r 60         pathSt
--[ 2022.10.25.11.38.38.665.0 ]--
r 60         pathSta
--[ 2022.10.25.11.38.38.757.0 ]--
r 60         pathStar
--[ 2022.10.25.11.38.38.930.0 ]--
r 60         pathStart
--[ 2022.10.25.11.38.39.268.0 ]--
r 60         pathStart 
--[ 2022.10.25.11.38.39.610.0 ]--
r 60         pathStart =
--[ 2022.10.25.11.38.39.723.0 ]--
r 60         pathStart = 
--[ 2022.10.25.11.38.40.248.0 ]--
r 60         pathStart = l
--[ 2022.10.25.11.38.40.430.0 ]--
r 60         pathStart = lo
--[ 2022.10.25.11.38.40.576.0 ]--
r 60         pathStart = loc
--[ 2022.10.25.11.38.40.948.0 ]--
r 60         pathStart = loc;
--[ 2022.10.25.11.38.51.931.0 ]--
r 64         return p;
--[ 2022.10.25.11.38.52.019.0 ]--
r 64         return pa;
--[ 2022.10.25.11.38.52.167.0 ]--
r 64         return pat;
--[ 2022.10.25.11.38.52.303.0 ]--
r 64         return path;
--[ 2022.10.25.11.38.52.657.0 ]--
r 64         return pathS;
--[ 2022.10.25.11.38.52.838.0 ]--
r 64         return pathSt;
--[ 2022.10.25.11.38.52.942.0 ]--
r 64         return pathSta;
--[ 2022.10.25.11.38.53.031.0 ]--
r 64         return pathStar;
--[ 2022.10.25.11.38.53.218.0 ]--
r 64         return pathStart;
--[ 2022.10.25.11.38.55.148.0 ]--
r 58     Coord pathStart ;    
--[ 2022.10.25.11.38.55.283.0 ]--
r 58     Coord pathStart =;    
--[ 2022.10.25.11.38.55.397.0 ]--
r 58     Coord pathStart = ;    
--[ 2022.10.25.11.38.55.586.0 ]--
r 58     Coord pathStart = n;    
--[ 2022.10.25.11.38.55.782.0 ]--
r 58     Coord pathStart = nu;    
--[ 2022.10.25.11.38.55.949.0 ]--
r 58     Coord pathStart = nul;    
--[ 2022.10.25.11.38.56.068.0 ]--
r 58     Coord pathStart = null;    
--[ 2022.10.25.11.39.26.306.0 ]--
+ 58     Coord pathStart = null;  
r 59     
--[ 2022.10.25.11.39.27.196.0 ]--
r 59     C
--[ 2022.10.25.11.39.27.524.0 ]--
r 59     Co
--[ 2022.10.25.11.39.27.628.0 ]--
r 59     Coo
--[ 2022.10.25.11.39.27.764.0 ]--
r 59     Coor
--[ 2022.10.25.11.39.28.007.0 ]--
r 59     Coord
--[ 2022.10.25.11.39.28.468.0 ]--
r 59     Coord 
--[ 2022.10.25.11.39.28.758.0 ]--
r 59     Coord p
--[ 2022.10.25.11.39.28.814.0 ]--
r 59     Coord pa
--[ 2022.10.25.11.39.28.971.0 ]--
r 59     Coord pat
--[ 2022.10.25.11.39.29.068.0 ]--
r 59     Coord path
--[ 2022.10.25.11.39.29.429.0 ]--
r 59     Coord pathE
--[ 2022.10.25.11.39.29.613.0 ]--
r 59     Coord pathEn
--[ 2022.10.25.11.39.29.747.0 ]--
r 59     Coord pathEnd
--[ 2022.10.25.11.39.30.117.0 ]--
r 59     Coord pathEnd 
--[ 2022.10.25.11.39.30.316.0 ]--
r 59     Coord pathEnd =
--[ 2022.10.25.11.39.30.390.0 ]--
r 59     Coord pathEnd = 
--[ 2022.10.25.11.39.30.809.0 ]--
r 59     Coord pathEnd = n
--[ 2022.10.25.11.39.31.001.0 ]--
r 59     Coord pathEnd = nu
--[ 2022.10.25.11.39.31.148.0 ]--
r 59     Coord pathEnd = nul
--[ 2022.10.25.11.39.31.244.0 ]--
r 59     Coord pathEnd = null
--[ 2022.10.25.11.39.31.524.0 ]--
r 59     Coord pathEnd = null;
--[ 2022.10.25.11.39.36.383.0 ]--
+ 69         
--[ 2022.10.25.11.39.36.898.0 ]--
r 69         p
--[ 2022.10.25.11.39.36.987.0 ]--
r 69         pa
--[ 2022.10.25.11.39.37.088.0 ]--
r 69         pat
--[ 2022.10.25.11.39.37.198.0 ]--
r 69         path
--[ 2022.10.25.11.39.37.660.0 ]--
r 69         pathE
--[ 2022.10.25.11.39.37.921.0 ]--
r 69         pathEn
--[ 2022.10.25.11.39.37.997.0 ]--
r 69         pathEnd
--[ 2022.10.25.11.39.38.353.0 ]--
r 69         pathEnd 
--[ 2022.10.25.11.39.38.441.0 ]--
r 69         pathEnd =
--[ 2022.10.25.11.39.38.580.0 ]--
r 69         pathEnd = 
--[ 2022.10.25.11.39.38.816.0 ]--
r 69         pathEnd = l
--[ 2022.10.25.11.39.38.971.0 ]--
r 69         pathEnd = lo
--[ 2022.10.25.11.39.39.023.0 ]--
r 69         pathEnd = loc
--[ 2022.10.25.11.39.39.457.0 ]--
r 69         pathEnd = loc;
--[ 2022.10.25.11.39.41.610.0 ]--
r 73         return p;
--[ 2022.10.25.11.39.41.726.0 ]--
r 73         return pa;
--[ 2022.10.25.11.39.41.852.0 ]--
r 73         return pat;
--[ 2022.10.25.11.39.42.114.0 ]--
r 73         return path;
--[ 2022.10.25.11.39.42.470.0 ]--
r 73         return pathE;
--[ 2022.10.25.11.39.42.688.0 ]--
r 73         return pathEn;
--[ 2022.10.25.11.39.42.729.0 ]--
r 73         return pathEnd;
--[ 2022.10.25.11.39.47.683.0 ]--
- 71
--[ 2022.10.25.11.39.51.372.0 ]--
- 63
--[ 2022.10.25.11.40.43.617.0 ]--
r 58     Coord pathStart = null;
--[ 2022.10.25.11.40.55.614.0 ]--
- 58
r 58 
--[ 2022.10.25.11.40.57.506.0 ]--
+ 55     Coord pathStart = null;
r 56     Coord pathEnd = null;
--[ 2022.10.25.11.40.59.362.0 ]--
- 59
--[ 2022.10.25.11.41.04.649.0 ]--
+ 55     
--[ 2022.10.25.11.43.51.682.0 ]--
+ 85         
--[ 2022.10.29.13.46.34.843.0 ]--
+ 103 <<<<<<< HEAD
+ 104         // use a binary heap?
+ 105         Coord front = getPathStart(); // front queue item will be the start of the path
+ 106         int row = pathStart.getI(); // returns row
+ 107         int col = pathStart.getJ(); // returns col
+ 108         // I think we should implement BinomialMinPQ.java here for our priority queue implementation?
+ 109         // I'm open to change though
+ 110 =======
+ 149 >>>>>>> a260a08 (computePath)
--[ 2022.10.29.13.46.34.871.0 ]--
UpdateTree (AD): 18 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.git/objects/1c/657c45ac423a783f740b198b8c2fb38ee7f1b9
+ /.git/objects/21/86213986a340219401746588209691c3a095a9
+ /.git/objects/28/3bac315169d5f131ab61d9a482b571b798e7e1
+ /.git/objects/57/48b108bdc945c49a7a22525e7f115334cb1314
+ /.git/objects/66/cac0def9077c483f8b403da0322603b318e347
+ /.git/objects/68/5025073ac6b980ab26461833cdd4d57cbe4d2d
+ /.git/objects/68/bcf84de8d9b44303a410eaa15011500fbc87dc
+ /.git/objects/81/415deddeaf54572c1897620ff4219df0bccf6c
+ /.git/objects/8a/ddb3b2f6de9b99de7882a6c54afc5707148f06
+ /.git/objects/8c/9d4b1873c2d88d47e50ec454cfd4a1b1721930
+ /.git/objects/99/fc95060d508a3b5990b31df2ec2b5d565dfcaa
+ /.git/objects/a1/8511806924333139ebf4a97a83d77f2ac48d01
+ /.git/objects/a2/60a0876851af8bbc28ad400b1586217be8fe03
+ /.git/objects/a5/142198d6b3120089f3d851541e0b10d8efa7cf
+ /.git/objects/bf/d803b8e3653af5834138691ea8521bcaa694d7
+ /.git/objects/cc/67a514baf96f57a38399f88f1f9b471c4b80e4
+ /.git/objects/d1/bab8cd923b7e91662049128ad2665d98da3e78
+ /.git/objects/df/ab375b6db323649427d9b468018424e7b318ad

--[ 2022.10.29.13.46.34.877.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.895.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.902.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.906.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.910.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.913.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.917.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.921.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.925.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.931.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.935.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.34.939.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.781.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.790.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.792.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.794.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.797.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.805.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.807.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.809.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.812.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.814.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.816.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.818.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.825.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.827.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.829.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.831.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.833.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.46.44.835.0 ]--
UpdateTree (AD): 2 2
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
- /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22,_11_49_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_26_22__11_49__Default_.xml

--[ 2022.10.29.13.47.15.013.0 ]--
- 103
- 103
- 103
- 103
- 103
- 103
- 103
- 103
- 141
--[ 2022.10.29.13.47.15.016.0 ]--
UpdateTree (AD): 27 0
+ /out/production/P04_Pathfinding/.donotlog
+ /out/production/P04_Pathfinding/algs4.jar
+ /out/production/P04_Pathfinding/stdlib.jar
+ /out/production/P04_Pathfinding/Coord.class
+ /out/production/P04_Pathfinding/png2emap.py
+ /out/production/P04_Pathfinding/Walker.class
+ /out/production/P04_Pathfinding/ramp.png.emap
+ /out/production/P04_Pathfinding/Terrain.class
+ /out/production/P04_Pathfinding/ramp2.png.emap
+ /out/production/P04_Pathfinding/ramp3.png.emap
+ /out/production/P04_Pathfinding/mazeAB.png.emap
+ /out/production/P04_Pathfinding/usa128.png.emap
+ /out/production/P04_Pathfinding/usa256.png.emap
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/usa1024.png.emap
+ /out/production/P04_Pathfinding/maze32_0.png.emap
+ /out/production/P04_Pathfinding/maze32_1.png.emap
+ /out/production/P04_Pathfinding/maze232_0.png.emap
+ /out/production/P04_Pathfinding/maze320_0.png.emap
+ /out/production/P04_Pathfinding/mazeBrain.png.emap
+ /out/production/P04_Pathfinding/TerrainEditor.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class
+ /out/production/P04_Pathfinding/PathfinderVisualizer.class
+ /out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_29_22,_13_46_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_25_22,_11_54_AM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_25_22__11_54_AM__Default_.xml

--[ 2022.10.29.13.47.27.978.0 ]--
UpdateTree (AD): 1 0
+ /.idea/shelf/Uncommitted_changes_before_Update_at_10_29_22__13_46__Default_.xml

